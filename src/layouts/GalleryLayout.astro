---
import { Image } from "astro:assets";
import BaseHead from "../components/BaseHead.astro";
import { SITE_TITLE } from "../consts";

interface Props {
  fontColor: string;
  backgroundColor: string;
  title: string;
  imageData: Record<
    string,
    () => Promise<{
      default: ImageMetadata;
    }>
  >;
}

const { fontColor, backgroundColor, title, imageData } = Astro.props;

var images = imageData;
const imagePaths = Object.keys(images);
let imageW: { [id: string]: number } = {};
let imageH: { [id: string]: number } = {};
for (const path of imagePaths) {
  let w = await images[path]().then((e) => e.default.width);
  imageW[path] = w;

  let h = await images[path]().then((e) => e.default.height);
  imageH[path] = h;
}
const preloadList = [imagePaths[0].split("public")[1]];
---

<html lang="en">
  <head>
    <BaseHead title={`${SITE_TITLE} | ${title}`} preloadList={preloadList} />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />
  </head>
  <body style={`background-color: ${backgroundColor}`}>
    <main>
      <div class="flex justify-between px-4 pt-4">
        <a href={Astro.url.origin} id="page-name" style=`color: ${fontColor}` class=`text-4xl`>
          <div>SOCIALIZED</div><div>FILM</div><div></div>
        </a>
        <div
          id="menu-icon"
          onclick="toggleMenu"
          style=`color: ${fontColor}`
          class="z-20 h-10 w-14 cursor-pointer text-4xl">
          <div style=`border-color: ${fontColor}` class=`border-b-2 h-2`></div>
          <div style=`border-color: ${fontColor}` class=`border-b-2 h-2`></div>
          <div style=`border-color: ${fontColor}` class=`border-b-2 h-2`></div>
        </div>
      </div>
      <div
        id="grid-view"
        class="absolute mx-auto grid grid-cols-[minmax(100px,20fr)_80fr] opacity-0 transition-opacity duration-500"
        style="display: none;">
        <div id="side-title" style=`color:${fontColor};` class="mt-16 flex h-fit justify-center">
          <div class="rotate-180 text-5xl" style=`color:${fontColor}; text-orientation: mixed; writing-mode: tb`>
            {title}
          </div>
        </div>
        <div
          class="grid max-h-[80vh] grid-cols-[repeat(auto-fit,minmax(150px,1fr));] items-stretch gap-1 overflow-y-auto">
          {
            imagePaths.map((path, i) => (
              <Image
                decoding="async"
                loading="lazy"
                class="thumbnail aspect-square cursor-pointer object-cover"
                src={path.split("public")[1]}
                alt=""
                data-index={i}
                width={imageW[path]}
                height={imageH[path]}
              />
            ))
          }
        </div>
      </div>
      <div
        id="single-view"
        class="absolute flex h-[70vh] flex-col items-center justify-center gap-2 opacity-100 transition-opacity duration-500 md:h-[80vh]">
        <div id="swiper-container" class="swiper">
          <div class="swiper-wrapper">
            {
              imagePaths.map((path) => (
                <Image
                  decoding="async"
                  loading="lazy"
                  class="swiper-slide object-contain"
                  src={path.split("public")[1]}
                  alt=""
                  width={imageW[path]}
                  height={imageH[path]}
                />
              ))
            }
          </div>
        </div>
        <div class="flex items-center justify-center gap-4 text-4xl" style={`color: ${fontColor};`}>
          <div id="prev-btn" class="cursor-pointer">←</div>
          <div class="text-xl">
            <span id="currentIndex">1</span>/<span>{imagePaths.length}</span>
          </div>
          <div id="next-btn" class="cursor-pointer">→</div>
        </div>
      </div>

      <button
        id="grid-view-btn"
        class="absolute bottom-4 left-0 z-20 ml-0 flex w-full justify-center hover:underline md:justify-start"
        style=`color: ${fontColor};`><span class="md:ml-4">{title}</span></button
      >
    </main>
    <div
      id="menu"
      class="absolute right-0 top-0 z-10 flex h-screen flex-col items-center justify-center gap-8 overflow-hidden bg-white bg-opacity-50 text-5xl font-light text-black transition-all duration-500 ease-out">
      <a href={Astro.url.origin}>Home</a>
      <div>Issues</div>
      <a href="/about"> About</a>
      <a href="https://www.instagram.com/socialized.film/" target="_blank" class="w-10">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"
          ><path
            d="M256 49.5c67.3 0 75.2.2 101.8 1.4 24.6 1.2 37.9 5.3 46.8 8.7a77.6 77.6 0 0128.9 18.9 77.6 77.6 0 0118.9 28.9c3.4 8.9 7.5 22.2 8.7 46.8 1.2 26.6 1.4 34.5 1.4 101.8s-.2 75.2-1.4 101.8c-1.2 24.6-5.3 37.9-8.7 46.8a84.3 84.3 0 01-47.8 47.8c-8.9 3.4-22.2 7.5-46.8 8.7-26.6 1.2-34.5 1.4-101.8 1.4s-75.2-.2-101.8-1.4c-24.6-1.2-37.9-5.3-46.8-8.7a77.6 77.6 0 01-28.9-18.9 77.6 77.6 0 01-18.9-28.9c-3.4-8.9-7.5-22.2-8.7-46.8-1.2-26.6-1.4-34.5-1.4-101.8s.2-75.2 1.4-101.8c1.2-24.6 5.3-37.9 8.7-46.8a77.6 77.6 0 0118.9-28.9 77.6 77.6 0 0128.9-18.9c8.9-3.4 22.2-7.5 46.8-8.7 26.6-1.2 34.5-1.4 101.8-1.4m0-45.4c-68.4 0-77 .3-103.9 1.5S107 11.1 91 17.3a122.8 122.8 0 00-44.6 29.1A122.8 122.8 0 0017.3 91c-6.2 16-10.5 34.3-11.7 61.1S4.1 187.6 4.1 256s.3 77 1.5 103.9S11.1 405 17.3 421a122.8 122.8 0 0029.1 44.6A122.8 122.8 0 0091 494.7c16 6.2 34.3 10.5 61.1 11.7s35.5 1.5 103.9 1.5 77-.3 103.9-1.5 45.1-5.5 61.1-11.7a129.4 129.4 0 0073.7-73.7c6.2-16 10.5-34.3 11.7-61.1s1.5-35.5 1.5-103.9-.3-77-1.5-103.9-5.5-45.1-11.7-61.1a122.8 122.8 0 00-29.1-44.6A122.8 122.8 0 00421 17.3c-16-6.2-34.3-10.5-61.1-11.7S324.4 4.1 256 4.1z"
          ></path><path
            d="M256 126.6A129.4 129.4 0 10385.4 256 129.5 129.5 0 00256 126.6zm0 213.4a84 84 0 1184-84 84 84 0 01-84 84z"
          ></path><circle cx="390.5" cy="121.5" r="30.2"></circle></svg
        >
      </a>
    </div>
  </body>
</html>

<script>
  let menuIcon = document.getElementById("menu-icon");
  let menu = document.getElementById("menu");

  menuIcon?.addEventListener("click", function () {
    menu?.classList.toggle("in");
  });
</script>

<script>
  import Swiper from "swiper";
  import { Keyboard, EffectFade, Autoplay, Navigation } from "swiper";

  const gridBtn = document.getElementById("grid-view-btn")!;
  const sideTitle = document.getElementById("side-title")!;

  const swiper = new Swiper("#swiper-container", {
    modules: [Autoplay, EffectFade, Keyboard, Navigation],
    loop: false,
    preloadImages: false,
    slidesPerView: 1,
    slidesPerGroup: 1,
    effect: "fade",
    keyboard: true,
    fadeEffect: { crossFade: true },
    speed: 1000,
    autoplay: { delay: 5000, pauseOnMouseEnter: true },
    navigation: {
      nextEl: "#next-btn",
      prevEl: "#prev-btn",
    },
    on: {
      activeIndexChange: function (sw) {
        document.getElementById("currentIndex")!.textContent = sw.realIndex + 1 + "";
      },
    },
  });

  gridBtn.addEventListener("click", function (e) {
    let grid = document.getElementById("grid-view");
    let single = document.getElementById("single-view");

    if (grid && single) {
      grid.style.display = "";
      setTimeout(() => {
        grid.style.opacity = "1";
        single.style.opacity = "0";
        single.style.visibility = "hidden";
        gridBtn.style.visibility = "hidden";
        sideTitle.style.visibility = "";
      }, 1);

      setTimeout(() => {
        single.style.display = "none";
      }, 500);
    }
  });

  let TNs = document.getElementsByClassName("thumbnail")!;

  for (const tn of TNs) {
    tn.addEventListener("click", function (e) {
      let grid = document.getElementById("grid-view");
      let single = document.getElementById("single-view");

      if (grid && single) {
        single.style.display = "";

        setTimeout(() => {
          grid.style.opacity = "0";
          single.style.visibility = "visible";
          single.style.opacity = "1";
          sideTitle.style.visibility = "hidden";
          gridBtn.style.visibility = "";
        }, 1);

        setTimeout(() => {
          grid.style.display = "none";
        }, 500);
      }

      let index = (e.target as HTMLImageElement).dataset["index"]!;
      swiper.slideTo(parseInt(index), 0);
    });
  }
</script>

<style>
  #menu {
    width: 0;
  }

  @media (width > 300px) {
    #menu.in {
      width: 100vw;
    }
  }

  @media (width > 768px) {
    #menu.in {
      width: 300px;
    }
  }
</style>
